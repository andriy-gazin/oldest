}
date_vector <- as.Date(date_vector, format = '%B %d, %Y')
return(date_vector)
}
# fix dates and calculate necessary variables
df <- df %>%
mutate(born = fix_dates(born),
died = fix_dates(died),
age = lubridate::time_length(died - born, 'years')) %>%
mutate(became = lag(died),
age_became = lubridate::time_length(became - born, 'years')) %>%
filter(!is.na(became)) %>%
select(index, name, birthplace, born, became, died, age_became, age_died = age, gender)
# fix current titleholder dates
df$died[nrow(df)] <- Sys.Date()
df$age_died[nrow(df)] <- lubridate::time_length(df$died[nrow(df)] - df$born[nrow(df)], 'years')
# save csv
write.csv(df, file = 'data_clean.csv', row.names = F)
library(dplyr)
library(stringr)
library(ggplot2)
Sys.setlocale(category = 'LC_TIME', locale = 'en_US.UTF-8')
df <- read.csv('data.csv', stringsAsFactors = F)
# declare function to format dates
fix_dates <- function(date_vector){
date_vector <- date_vector %>%
str_replace_all('Jan.', 'January') %>%
str_replace_all('Feb.', 'February') %>%
str_replace_all('Mar.', 'March') %>%
str_replace_all('Apr.', 'April') %>%
str_replace_all('Aug.', 'August') %>%
str_replace_all('Sept.', 'September') %>%
str_replace_all('Oct.', 'October') %>%
str_replace_all('Nov.', 'November') %>%
str_replace_all('Dec.', 'December') %>%
str_squish()
for(i in 1:length(date_vector)) {
if(grepl('(?<=\\w )\\d\\b', date_vector[i])) {
date_vector[i] <- paste0(str_extract(date_vector[i], '^\\w+'),
' 0',
str_extract(date_vector[i], '(?<=\\w )\d\b'),
', ',
str_extract(date_vector[i], '\\b\\d{4}\\b'))
}
}
date_vector <- as.Date(date_vector, format = '%B %d, %Y')
return(date_vector)
}
# fix dates and calculate necessary variables
df <- df %>%
mutate(born = fix_dates(born),
died = fix_dates(died),
age = lubridate::time_length(died - born, 'years')) %>%
mutate(became = lag(died),
age_became = lubridate::time_length(became - born, 'years')) %>%
filter(!is.na(became)) %>%
select(index, name, birthplace, born, became, died, age_became, age_died = age, gender)
# fix current titleholder dates
df$died[nrow(df)] <- Sys.Date()
df$age_died[nrow(df)] <- lubridate::time_length(df$died[nrow(df)] - df$born[nrow(df)], 'years')
# save csv
write.csv(df, file = 'data_clean.csv', row.names = F)
rm(df, fix_dates)
library(ggplot2)
df <- read.csv('data_clean.csv', stringsAsFactors = F)
legend <- data.frame(
x = as.Date(c('1987-10-01', '1998-01-01')),
y = c(112.7, 122.6),
label = c('when she became\nworld\'s oldest\nperson', 'when she died')
)
# visualize
png(filename = 'oldest.png', width = 1000, height = 600)
ggplot(df)+
geom_segment(aes(x = became, y = age_became, xend = died, yend = age_died, color = gender),
show.legend = F)+
geom_point(data = df[1:nrow(df)-1, ], aes(x = died, y = age_died, fill = gender),
pch = 21, color = '#F3F7F7', size = 3)+
geom_label(data = legend, aes(x = x, y = y, label = label),
family = 'Ubuntu Mono', color = '#5D646F', fill = '#F3F7F7',
hjust = c(0, -0.05), vjust = c(1, 0.5), label.size = NA,
size = 4.5, lineheight = 0.9)+
scale_fill_brewer(type = 'qual', palette = 2, labels = c('female', 'male'),
aesthetics = c('fill', 'color'))+
scale_x_date(limits = c(as.Date('1953-01-01'), as.Date('2020-01-01')),
breaks = seq.Date(as.Date('1955-01-01'), as.Date('2020-01-01'), '5 years'),
date_labels = '\'%y', expand = c(0.01, 0.01))+
scale_y_continuous(breaks = classInt::classIntervals(as.numeric(df$age_died), 7,
style = 'jenks')$brks %>%
round(digits = 1))+
guides(fill = guide_legend(override.aes = list(size = 5)))+
labs(title = 'World\'s Oldest Person Titleholders Since 1955',
caption = 'Data: Gerontology Research Group | Viz: Textura.in.ua',
x = 'year', y = 'age')+
theme_minimal(base_family = 'Ubuntu Mono')+
theme(
legend.position = 'top',
legend.justification = 'left',
legend.title = element_blank(),
legend.text = element_text(size = 13),
legend.spacing.x = unit(5, 'pt'),
legend.margin = margin(l = -7),
text = element_text(color = '#5D646F'),
axis.title.x = element_text(hjust = 1, size = 13, margin = margin(t = 10)),
axis.title.y = element_text(hjust = 1, size = 13, margin = margin(r = 10)),
axis.text = element_text(size = 13),
axis.text.y = element_text(vjust = -0.5, margin = margin(r = -35)),
panel.grid.major = element_line(linetype = 'dotted', color = '#5D646F', size = 0.1),
panel.grid.minor = element_blank(),
plot.title = element_text(size = 36, face = 'bold', margin = margin(b = 10)),
plot.subtitle = element_text(size = 18, margin = margin(b = 10)),
plot.caption = element_text(size = 12, margin = margin(t = 20)),
plot.background = element_rect(fill = '#F3F7F7'),
plot.margin = unit(c(1.5, 1.5, 1.5, 1.5), 'cm')
)
dev.off()
View(df)
library(dplyr)
library(stringr)
library(ggplot2)
Sys.setlocale(category = 'LC_TIME', locale = 'en_US.UTF-8')
df <- read.csv('data.csv', stringsAsFactors = F)
# declare function to format dates
fix_dates <- function(date_vector){
date_vector <- date_vector %>%
str_replace_all('Jan.', 'January') %>%
str_replace_all('Feb.', 'February') %>%
str_replace_all('Mar.', 'March') %>%
str_replace_all('Apr.', 'April') %>%
str_replace_all('Aug.', 'August') %>%
str_replace_all('Sept.', 'September') %>%
str_replace_all('Oct.', 'October') %>%
str_replace_all('Nov.', 'November') %>%
str_replace_all('Dec.', 'December') %>%
str_squish()
for(i in 1:length(date_vector)) {
if(grepl('(?<=\\w )\\d\\b', date_vector[i])) {
date_vector[i] <- paste0(str_extract(date_vector[i], '^\\w+'),
' 0',
str_extract(date_vector[i], '(?<=\\w )\d\b'),
', ',
str_extract(date_vector[i], '\\b\\d{4}\\b'))
}
}
date_vector <- as.Date(date_vector, format = '%B %d, %Y')
return(date_vector)
}
# fix dates and calculate necessary variables
df <- df %>%
mutate(born = fix_dates(born),
died = fix_dates(died),
age = lubridate::time_length(died - born, 'years')) %>%
mutate(became = lag(died),
age_became = lubridate::time_length(became - born, 'years')) %>%
filter(!is.na(became)) %>%
select(index, name, birthplace, born, became, died, age_became, age_died = age, gender)
fix_dates <- function(date_vector){
date_vector <- date_vector %>%
str_replace_all('Jan.', 'January') %>%
str_replace_all('Feb.', 'February') %>%
str_replace_all('Mar.', 'March') %>%
str_replace_all('Apr.', 'April') %>%
str_replace_all('Aug.', 'August') %>%
str_replace_all('Sept.', 'September') %>%
str_replace_all('Oct.', 'October') %>%
str_replace_all('Nov.', 'November') %>%
str_replace_all('Dec.', 'December') %>%
str_squish()
for(i in 1:length(date_vector)) {
if(grepl('(?<=\\w )\\d\\b', date_vector[i])) {
date_vector[i] <- paste0(str_extract(date_vector[i], '^\\w+'),
' 0',
str_extract(date_vector[i], '(?<=\\w )\d\b'),
', ',
str_extract(date_vector[i], '\\b\\d{4}\\b'))
}
}
date_vector <- as.Date(date_vector, format = '%B %d, %Y')
return(date_vector)
}
library(dplyr)
library(stringr)
library(ggplot2)
Sys.setlocale(category = 'LC_TIME', locale = 'en_US.UTF-8')
df <- read.csv('data.csv', stringsAsFactors = F)
# declare function to format dates
fix_dates <- function(date_vector){
date_vector <- date_vector %>%
str_replace_all('Jan.', 'January') %>%
str_replace_all('Feb.', 'February') %>%
str_replace_all('Mar.', 'March') %>%
str_replace_all('Apr.', 'April') %>%
str_replace_all('Aug.', 'August') %>%
str_replace_all('Sept.', 'September') %>%
str_replace_all('Oct.', 'October') %>%
str_replace_all('Nov.', 'November') %>%
str_replace_all('Dec.', 'December') %>%
str_squish()
for(i in 1:length(date_vector)) {
if(grepl('(?<=\\w )\\d\\b', date_vector[i])) {
date_vector[i] <- paste0(str_extract(date_vector[i], '^\\w+'),
' 0',
str_extract(date_vector[i], '(?<=\\w )\\d\\b'),
', ',
str_extract(date_vector[i], '\\b\\d{4}\\b'))
}
}
date_vector <- as.Date(date_vector, format = '%B %d, %Y')
return(date_vector)
}
# fix dates and calculate necessary variables
df <- df %>%
mutate(born = fix_dates(born),
died = fix_dates(died),
age = lubridate::time_length(died - born, 'years')) %>%
mutate(became = lag(died),
age_became = lubridate::time_length(became - born, 'years')) %>%
filter(!is.na(became)) %>%
select(index, name, birthplace, born, became, died, age_became, age_died = age, gender)
# fix current titleholder dates
df$died[nrow(df)] <- Sys.Date()
df$age_died[nrow(df)] <- lubridate::time_length(df$died[nrow(df)] - df$born[nrow(df)], 'years')
# save csv
write.csv(df, file = 'data_clean.csv', row.names = F)
rm(df, fix_dates)
library(dplyr)
library(stringr)
library(ggplot2)
Sys.setlocale(category = 'LC_TIME', locale = 'en_US.UTF-8')
df <- read.csv('data.csv', stringsAsFactors = F)
# declare function to format dates
fix_dates <- function(date_vector){
date_vector <- date_vector %>%
str_replace_all('Jan.', 'January') %>%
str_replace_all('Feb.', 'February') %>%
str_replace_all('Mar.', 'March') %>%
str_replace_all('Apr.', 'April') %>%
str_replace_all('Aug.', 'August') %>%
str_replace_all('Sept.', 'September') %>%
str_replace_all('Oct.', 'October') %>%
str_replace_all('Nov.', 'November') %>%
str_replace_all('Dec.', 'December') %>%
str_squish()
for(i in 1:length(date_vector)) {
if(grepl('(?<=\\w )\\d\\b', date_vector[i])) {
date_vector[i] <- paste0(str_extract(date_vector[i], '^\\w+'),
' 0',
str_extract(date_vector[i], '(?<=\\w )\\d\\b'),
', ',
str_extract(date_vector[i], '\\b\\d{4}\\b'))
}
}
date_vector <- as.Date(date_vector, format = '%B %d, %Y')
return(date_vector)
}
View(df)
df <- df %>%
mutate(born = fix_dates(born),
died = fix_dates(died),
age = lubridate::time_length(died - born, 'years')) %>%
mutate(became = lag(died),
age_became = lubridate::time_length(became - born, 'years')) %>%
filter(!is.na(became)) %>%
select(index, name, birthplace, born, became, died, age_became, age_died = age, gender)
fix_dates(df$born)
grepl(pattern = "(?<=\\w )\\d\\b"), df$born)
grepl(pattern = "(?<=\\w )\\d\\b", df$born)
grepl(pattern = "(?<=\\w )\\d", df$born)
grepl(pattern = "(?<=\\w )\\d{1}", df$born)
str_detect(df$born, "(?<=\\w )\\d{1}")
str_detect(df$born, "(?<=\\w )\\d{1}\\b")
str_detect(df$born, "(?<=\\w )\\d\\b")
str_detect(df$born, "(?<=\\w )\\d")
library(dplyr)
library(stringr)
library(ggplot2)
Sys.setlocale(category = 'LC_TIME', locale = 'en_US.UTF-8')
df <- read.csv('data.csv', stringsAsFactors = F)
# declare function to format dates
fix_dates <- function(date_vector){
date_vector <- date_vector %>%
str_replace_all('Jan.', 'January') %>%
str_replace_all('Feb.', 'February') %>%
str_replace_all('Mar.', 'March') %>%
str_replace_all('Apr.', 'April') %>%
str_replace_all('Aug.', 'August') %>%
str_replace_all('Sept.', 'September') %>%
str_replace_all('Oct.', 'October') %>%
str_replace_all('Nov.', 'November') %>%
str_replace_all('Dec.', 'December') %>%
str_squish()
for(i in 1:length(date_vector)) {
if(str_detect(date_vector[i], '(?<=\\w )\\d\\b')) {
date_vector[i] <- paste0(str_extract(date_vector[i], '^\\w+'),
' 0',
str_extract(date_vector[i], '(?<=\\w )\\d\\b'),
', ',
str_extract(date_vector[i], '\\b\\d{4}\\b'))
}
}
date_vector <- as.Date(date_vector, format = '%B %d, %Y')
return(date_vector)
}
# fix dates and calculate necessary variables
df <- df %>%
mutate(born = fix_dates(born),
died = fix_dates(died),
age = lubridate::time_length(died - born, 'years')) %>%
mutate(became = lag(died),
age_became = lubridate::time_length(became - born, 'years')) %>%
filter(!is.na(became)) %>%
select(index, name, birthplace, born, became, died, age_became, age_died = age, gender)
# fix current titleholder dates
df$died[nrow(df)] <- Sys.Date()
df$age_died[nrow(df)] <- lubridate::time_length(df$died[nrow(df)] - df$born[nrow(df)], 'years')
# save csv
#write.csv(df, file = 'data_clean.csv', row.names = F)
#rm(df, fix_dates)
library(dplyr)
library(stringr)
library(ggplot2)
Sys.setlocale(category = 'LC_TIME', locale = 'en_US.UTF-8')
df <- read.csv('data.csv', stringsAsFactors = F)
# declare function to format dates
fix_dates <- function(date_vector){
date_vector <- date_vector %>%
str_replace_all('Jan.', 'January') %>%
str_replace_all('Feb.', 'February') %>%
str_replace_all('Mar.', 'March') %>%
str_replace_all('Apr.', 'April') %>%
str_replace_all('Aug.', 'August') %>%
str_replace_all('Sept.', 'September') %>%
str_replace_all('Oct.', 'October') %>%
str_replace_all('Nov.', 'November') %>%
str_replace_all('Dec.', 'December') %>%
str_squish()
for(i in 1:length(date_vector)) {
if(str_detect(date_vector[i], '(?<=\\w )\\d\\b')) {
date_vector[i] <- paste0(str_extract(date_vector[i], '^\\w+'),
' 0',
str_extract(date_vector[i], '(?<=\\w )\\d\\b'),
', ',
str_extract(date_vector[i], '\\b\\d{4}\\b'))
}
}
date_vector <- as.Date(date_vector, format = '%B %d, %Y')
return(date_vector)
}
# fix dates and calculate necessary variables
df <- df %>%
mutate(born = fix_dates(born),
died = fix_dates(died),
age = lubridate::time_length(died - born, 'years')) %>%
mutate(became = lag(died),
age_became = lubridate::time_length(became - born, 'years')) %>%
filter(!is.na(became)) %>%
select(index, name, birthplace, born, became, died, age_became, age_died = age, gender)
# fix current titleholder dates
df$died[nrow(df)] <- Sys.Date()
df$age_died[nrow(df)] <- lubridate::time_length(df$died[nrow(df)] - df$born[nrow(df)], 'years')
# save csv
write.csv(df, file = 'data_clean.csv', row.names = F)
rm(df)
library(ggplot2)
df <- read.csv('data_clean.csv', stringsAsFactors = F)
legend <- data.frame(
x = as.Date(c('1987-10-01', '1998-01-01')),
y = c(112.7, 122.6),
label = c('when she became\nworld\'s oldest\nperson', 'when she died')
)
# visualize
png(filename = 'oldest.png', width = 1000, height = 600)
ggplot(df)+
geom_segment(aes(x = became, y = age_became, xend = died, yend = age_died, color = gender),
show.legend = F)+
geom_point(data = df[1:nrow(df)-1, ], aes(x = died, y = age_died, fill = gender),
pch = 21, color = '#F3F7F7', size = 3)+
geom_label(data = legend, aes(x = x, y = y, label = label),
family = 'Ubuntu Mono', color = '#5D646F', fill = '#F3F7F7',
hjust = c(0, -0.05), vjust = c(1, 0.5), label.size = NA,
size = 4.5, lineheight = 0.9)+
scale_fill_brewer(type = 'qual', palette = 2, labels = c('female', 'male'),
aesthetics = c('fill', 'color'))+
scale_x_date(limits = c(as.Date('1953-01-01'), as.Date('2020-01-01')),
breaks = seq.Date(as.Date('1955-01-01'), as.Date('2020-01-01'), '5 years'),
date_labels = '\'%y', expand = c(0.01, 0.01))+
scale_y_continuous(breaks = classInt::classIntervals(as.numeric(df$age_died), 7,
style = 'jenks')$brks %>%
round(digits = 1))+
guides(fill = guide_legend(override.aes = list(size = 5)))+
labs(title = 'World\'s Oldest Person Titleholders Since 1955',
caption = 'Data: Gerontology Research Group | Viz: Textura.in.ua',
x = 'year', y = 'age')+
theme_minimal(base_family = 'Ubuntu Mono')+
theme(
legend.position = 'top',
legend.justification = 'left',
legend.title = element_blank(),
legend.text = element_text(size = 13),
legend.spacing.x = unit(5, 'pt'),
legend.margin = margin(l = -7),
text = element_text(color = '#5D646F'),
axis.title.x = element_text(hjust = 1, size = 13, margin = margin(t = 10)),
axis.title.y = element_text(hjust = 1, size = 13, margin = margin(r = 10)),
axis.text = element_text(size = 13),
axis.text.y = element_text(vjust = -0.5, margin = margin(r = -35)),
panel.grid.major = element_line(linetype = 'dotted', color = '#5D646F', size = 0.1),
panel.grid.minor = element_blank(),
plot.title = element_text(size = 36, face = 'bold', margin = margin(b = 10)),
plot.subtitle = element_text(size = 18, margin = margin(b = 10)),
plot.caption = element_text(size = 12, margin = margin(t = 20)),
plot.background = element_rect(fill = '#F3F7F7'),
plot.margin = unit(c(1.5, 1.5, 1.5, 1.5), 'cm')
)
dev.off()
df$became[1]
df$age_became[1]
library(ggplot2)
df <- read.csv('data_clean.csv', stringsAsFactors = F,
colClasses = c(NA, NA, NA, "Date", "Date", "Date", NA, NA, NA))
legend <- data.frame(
x = as.Date(c('1987-10-01', '1998-01-01')),
y = c(112.7, 122.6),
label = c('when she became\nworld\'s oldest\nperson', 'when she died')
)
# visualize
png(filename = 'oldest.png', width = 1000, height = 600)
ggplot(df)+
geom_segment(aes(x = became, y = age_became, xend = died, yend = age_died, color = gender),
show.legend = F)+
geom_point(data = df[1:nrow(df)-1, ], aes(x = died, y = age_died, fill = gender),
pch = 21, color = '#F3F7F7', size = 3)+
geom_label(data = legend, aes(x = x, y = y, label = label),
family = 'Ubuntu Mono', color = '#5D646F', fill = '#F3F7F7',
hjust = c(0, -0.05), vjust = c(1, 0.5), label.size = NA,
size = 4.5, lineheight = 0.9)+
scale_fill_brewer(type = 'qual', palette = 2, labels = c('female', 'male'),
aesthetics = c('fill', 'color'))+
scale_x_date(limits = c(as.Date('1953-01-01'), as.Date('2020-01-01')),
breaks = seq.Date(as.Date('1955-01-01'), as.Date('2020-01-01'), '5 years'),
date_labels = '\'%y', expand = c(0.01, 0.01))+
scale_y_continuous(breaks = classInt::classIntervals(as.numeric(df$age_died), 7,
style = 'jenks')$brks %>%
round(digits = 1))+
guides(fill = guide_legend(override.aes = list(size = 5)))+
labs(title = 'World\'s Oldest Person Titleholders Since 1955',
caption = 'Data: Gerontology Research Group | Viz: Textura.in.ua',
x = 'year', y = 'age')+
theme_minimal(base_family = 'Ubuntu Mono')+
theme(
legend.position = 'top',
legend.justification = 'left',
legend.title = element_blank(),
legend.text = element_text(size = 13),
legend.spacing.x = unit(5, 'pt'),
legend.margin = margin(l = -7),
text = element_text(color = '#5D646F'),
axis.title.x = element_text(hjust = 1, size = 13, margin = margin(t = 10)),
axis.title.y = element_text(hjust = 1, size = 13, margin = margin(r = 10)),
axis.text = element_text(size = 13),
axis.text.y = element_text(vjust = -0.5, margin = margin(r = -35)),
panel.grid.major = element_line(linetype = 'dotted', color = '#5D646F', size = 0.1),
panel.grid.minor = element_blank(),
plot.title = element_text(size = 36, face = 'bold', margin = margin(b = 10)),
plot.subtitle = element_text(size = 18, margin = margin(b = 10)),
plot.caption = element_text(size = 12, margin = margin(t = 20)),
plot.background = element_rect(fill = '#F3F7F7'),
plot.margin = unit(c(1.5, 1.5, 1.5, 1.5), 'cm')
)
dev.off()
library(dplyr)
library(stringr)
library(ggplot2)
Sys.setlocale(category = 'LC_TIME', locale = 'en_US.UTF-8')
df <- read.csv('data.csv', stringsAsFactors = F)
# declare function to format dates
fix_dates <- function(date_vector){
date_vector <- date_vector %>%
str_replace_all('Jan.', 'January') %>%
str_replace_all('Feb.', 'February') %>%
str_replace_all('Mar.', 'March') %>%
str_replace_all('Apr.', 'April') %>%
str_replace_all('Aug.', 'August') %>%
str_replace_all('Sept.', 'September') %>%
str_replace_all('Oct.', 'October') %>%
str_replace_all('Nov.', 'November') %>%
str_replace_all('Dec.', 'December') %>%
str_squish()
for(i in 1:length(date_vector)) {
if(str_detect(date_vector[i], '(?<=\\w )\\d\\b')) {
date_vector[i] <- paste0(str_extract(date_vector[i], '^\\w+'),
' 0',
str_extract(date_vector[i], '(?<=\\w )\\d\\b'),
', ',
str_extract(date_vector[i], '\\b\\d{4}\\b'))
}
}
date_vector <- as.Date(date_vector, format = '%B %d, %Y')
return(date_vector)
}
# fix dates and calculate necessary variables
df <- df %>%
mutate(born = fix_dates(born),
died = fix_dates(died),
became = lag(died),
age_became = lubridate::time_length(became - born, 'years'),
age_died = lubridate::time_length(died - born, 'years')) %>%
filter(!is.na(became)) %>%
select(index, name, birthplace, born, became, died, age_became, age_died, gender)
# fix current titleholder dates
df$died[nrow(df)] <- Sys.Date()
df$age_died[nrow(df)] <- lubridate::time_length(df$died[nrow(df)] - df$born[nrow(df)], 'years')
View(df)
